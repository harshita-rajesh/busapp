{"ast":null,"code":"try {\n  var _response$data$result, _response$data$result2, _response$data$result3;\n  const response = await axios.post('https://ind.idv.hyperverge.co/v1/readId', formData, {\n    headers\n  });\n  console.log('API Response:', response.data);\n  const details = (_response$data$result = response.data.result) === null || _response$data$result === void 0 ? void 0 : (_response$data$result2 = _response$data$result.details) === null || _response$data$result2 === void 0 ? void 0 : (_response$data$result3 = _response$data$result2[0]) === null || _response$data$result3 === void 0 ? void 0 : _response$data$result3.fieldsExtracted;\n  console.log('Extracted Details:', details);\n  if (details) {\n    var _details$dateOfExpiry, _details$expiryDate, _details$validUntil, _details$expirationDa;\n    const expiryDate = ((_details$dateOfExpiry = details.dateOfExpiry) === null || _details$dateOfExpiry === void 0 ? void 0 : _details$dateOfExpiry.value) || ((_details$expiryDate = details.expiryDate) === null || _details$expiryDate === void 0 ? void 0 : _details$expiryDate.value) || ((_details$validUntil = details.validUntil) === null || _details$validUntil === void 0 ? void 0 : _details$validUntil.value) || ((_details$expirationDa = details.expirationDate) === null || _details$expirationDa === void 0 ? void 0 : _details$expirationDa.value);\n    console.log('Expiry Date:', expiryDate);\n    if (expiryDate) {\n      const formattedExpiryDate = new Date(expiryDate.split('-').reverse().join('-'));\n      setdateOfExpiry(expiryDate);\n      if (formattedExpiryDate > new Date()) {\n        setStep(2);\n        setStatus('Driver License validated successfully!');\n      } else {\n        alert('Driver License is invalid or expired.');\n        setStatus('Validation failed.');\n      }\n    } else {\n      alert('No expiry date found in the document.');\n      setStatus('Validation failed.');\n    }\n  } else {\n    alert('Unable to fetch Driver\\'s License details.');\n    setStatus('Validation failed.');\n  }\n} catch (error) {\n  console.error('Error validating DL:', error);\n  alert('Error validating Driver\\'s License.');\n  setStatus('Validation failed.');\n}","map":{"version":3,"names":["_response$data$result","_response$data$result2","_response$data$result3","response","axios","post","formData","headers","console","log","data","details","result","fieldsExtracted","_details$dateOfExpiry","_details$expiryDate","_details$validUntil","_details$expirationDa","expiryDate","dateOfExpiry","value","validUntil","expirationDate","formattedExpiryDate","Date","split","reverse","join","setdateOfExpiry","setStep","setStatus","alert","error"],"sources":["/home/user/Desktop/Week-0/MERN-main/frontend/src/components/DriverKYC.js"],"sourcesContent":["try {\n    const response = await axios.post('https://ind.idv.hyperverge.co/v1/readId', formData, { headers });\n    console.log('API Response:', response.data);\n\n    const details = response.data.result?.details?.[0]?.fieldsExtracted;\n    console.log('Extracted Details:', details);\n\n    if (details) {\n        const expiryDate =\n            details.dateOfExpiry?.value ||\n            details.expiryDate?.value ||\n            details.validUntil?.value ||\n            details.expirationDate?.value;\n\n        console.log('Expiry Date:', expiryDate);\n\n        if (expiryDate) {\n            const formattedExpiryDate = new Date(expiryDate.split('-').reverse().join('-'));\n            setdateOfExpiry(expiryDate);\n            if (formattedExpiryDate > new Date()) {\n                setStep(2);\n                setStatus('Driver License validated successfully!');\n            } else {\n                alert('Driver License is invalid or expired.');\n                setStatus('Validation failed.');\n            }\n        } else {\n            alert('No expiry date found in the document.');\n            setStatus('Validation failed.');\n        }\n    } else {\n        alert('Unable to fetch Driver\\'s License details.');\n        setStatus('Validation failed.');\n    }\n} catch (error) {\n    console.error('Error validating DL:', error);\n    alert('Error validating Driver\\'s License.');\n    setStatus('Validation failed.');\n}\n"],"mappings":"AAAA,IAAI;EAAA,IAAAA,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,yCAAyC,EAAEC,QAAQ,EAAE;IAAEC;EAAQ,CAAC,CAAC;EACnGC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,QAAQ,CAACO,IAAI,CAAC;EAE3C,MAAMC,OAAO,IAAAX,qBAAA,GAAGG,QAAQ,CAACO,IAAI,CAACE,MAAM,cAAAZ,qBAAA,wBAAAC,sBAAA,GAApBD,qBAAA,CAAsBW,OAAO,cAAAV,sBAAA,wBAAAC,sBAAA,GAA7BD,sBAAA,CAAgC,CAAC,CAAC,cAAAC,sBAAA,uBAAlCA,sBAAA,CAAoCW,eAAe;EACnEL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,OAAO,CAAC;EAE1C,IAAIA,OAAO,EAAE;IAAA,IAAAG,qBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,qBAAA;IACT,MAAMC,UAAU,GACZ,EAAAJ,qBAAA,GAAAH,OAAO,CAACQ,YAAY,cAAAL,qBAAA,uBAApBA,qBAAA,CAAsBM,KAAK,OAAAL,mBAAA,GAC3BJ,OAAO,CAACO,UAAU,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAoBK,KAAK,OAAAJ,mBAAA,GACzBL,OAAO,CAACU,UAAU,cAAAL,mBAAA,uBAAlBA,mBAAA,CAAoBI,KAAK,OAAAH,qBAAA,GACzBN,OAAO,CAACW,cAAc,cAAAL,qBAAA,uBAAtBA,qBAAA,CAAwBG,KAAK;IAEjCZ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAES,UAAU,CAAC;IAEvC,IAAIA,UAAU,EAAE;MACZ,MAAMK,mBAAmB,GAAG,IAAIC,IAAI,CAACN,UAAU,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC/EC,eAAe,CAACV,UAAU,CAAC;MAC3B,IAAIK,mBAAmB,GAAG,IAAIC,IAAI,CAAC,CAAC,EAAE;QAClCK,OAAO,CAAC,CAAC,CAAC;QACVC,SAAS,CAAC,wCAAwC,CAAC;MACvD,CAAC,MAAM;QACHC,KAAK,CAAC,uCAAuC,CAAC;QAC9CD,SAAS,CAAC,oBAAoB,CAAC;MACnC;IACJ,CAAC,MAAM;MACHC,KAAK,CAAC,uCAAuC,CAAC;MAC9CD,SAAS,CAAC,oBAAoB,CAAC;IACnC;EACJ,CAAC,MAAM;IACHC,KAAK,CAAC,4CAA4C,CAAC;IACnDD,SAAS,CAAC,oBAAoB,CAAC;EACnC;AACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;EACZxB,OAAO,CAACwB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC5CD,KAAK,CAAC,qCAAqC,CAAC;EAC5CD,SAAS,CAAC,oBAAoB,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}